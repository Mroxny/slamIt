basePath: /api/v1
definitions:
  model.LoginRequest:
    properties:
      email:
        example: bob@example.com
        type: string
      password:
        example: P@ssw0rd
        type: string
    type: object
  model.LoginResponse:
    properties:
      id:
        type: string
      token:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: bob@example.com
        type: string
      name:
        example: Bob
        type: string
      password:
        example: P@ssw0rd
        type: string
    type: object
  model.Slam:
    properties:
      description:
        type: string
      id:
        type: integer
      public:
        type: boolean
      title:
        type: string
    required:
    - title
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
host: localhost:8080
info:
  contact:
    email: support@slamit.app
    name: API Support
  description: API for managing poetry slams and participation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SlamIt API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Log in with email and password to receive a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: invalid request
          schema:
            type: string
        "401":
          description: unauthorized
          schema:
            type: string
      summary: Authenticate user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with name, email, and password
      parameters:
      - description: Registration data
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: invalid request
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
  /participation/slams/{slamID}/users:
    get:
      description: Get all users participating in a given slam
      parameters:
      - description: Slam ID
        in: path
        name: slamID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - BearerAuth: []
      summary: List users in a slam
      tags:
      - participation
  /participation/users/{userID}/slams:
    get:
      description: Get all slams a user is participating in
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Slam'
            type: array
      security:
      - BearerAuth: []
      summary: List slams for a user
      tags:
      - participation
  /participation/users/{userID}/slams/{slamID}:
    delete:
      description: Remove a user from a slamâ€™s participants
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Slam ID
        in: path
        name: slamID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Leave a slam
      tags:
      - participation
    post:
      description: Add a user as a participant in a slam
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Slam ID
        in: path
        name: slamID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Join a slam
      tags:
      - participation
  /slams/:
    get:
      description: Get all public slams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Slam'
            type: array
      summary: List slams
      tags:
      - slams
    post:
      consumes:
      - application/json
      description: Create a new slam with the provided input
      parameters:
      - description: Slam data
        in: body
        name: slam
        required: true
        schema:
          $ref: '#/definitions/model.Slam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Slam'
        "400":
          description: invalid input
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a slam
      tags:
      - slams
  /slams/{id}:
    delete:
      description: Remove a slam by its ID
      parameters:
      - description: Slam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "404":
          description: slam not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a slam
      tags:
      - slams
    get:
      description: Retrieve a single slam by its ID
      parameters:
      - description: Slam ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Slam'
        "404":
          description: slam not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a slam by ID
      tags:
      - slams
    put:
      consumes:
      - application/json
      description: Update an existing slam by its ID
      parameters:
      - description: Slam ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated slam data
        in: body
        name: slam
        required: true
        schema:
          $ref: '#/definitions/model.Slam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Slam'
        "400":
          description: invalid input
          schema:
            type: string
        "404":
          description: slam not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a slam
      tags:
      - slams
  /users/:
    get:
      description: Retrieve a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Remove a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: no content
          schema:
            type: string
        "404":
          description: user not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieve a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: user not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: invalid input
          schema:
            type: string
        "404":
          description: user not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
