# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
openapi: 3.0.3
info:
  title: SlamIt API
  version: 1.0.0
  description: API for managing poetry slams, user accounts, and participation.

servers:
  - url: /api/v1
    description: "Dev"
  - url: /api/v1
    description: "Prod"

tags:
  - name: auth
    description: User registration and login
  - name: users
    description: User management
  - name: slams
    description: Slam management
  - name: stages
    description: Stage management
  - name: performances
    description: performances management
  - name: participations
    description: Slam participation (users joining slams)

paths:
  /auth/register:
    post:
      tags: [auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input

  /auth/login:
    post:
      tags: [auth]
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized

  /users:
    get:
      tags: [users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [users]
      summary: Add a new temporary user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "201":
          description: Temporary user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input

  /users/{userID}:
    get:
      tags: [users]
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
    put:
      tags: [users]
      summary: Update a user
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags: [users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "404":
          description: User not found

  /slams:
    get:
      tags: [slams]
      summary: Get all slams
      responses:
        "200":
          description: List of slams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slam'
    post:
      tags: [slams]
      summary: Create a slam
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlamRequest'
      responses:
        "201":
          description: Slam created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slam'

  /slams/{slamID}:
    get:
      tags: [slams]
      summary: Get slam by ID
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A slam
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slam'
        "404":
          description: Slam not found
    put:
      tags: [slams]
      summary: Update a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlamRequest'
      responses:
        "200":
          description: Updated slam
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slam'
    delete:
      tags: [slams]
      summary: Delete a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "404":
          description: Slam not found
          
  /slams/{slamID}/stages:
    get:
      tags: [slams]
      summary: List stages for a slam
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of stages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stage'

    post:
      tags: [slams]
      summary: Create a new stage for a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageRequest'
      responses:
        "201":
          description: Stage created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'

  /stages/{stageID}:
    get:
      tags: [stages]
      summary: Get a stage
      parameters:
        - name: stageID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A stage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
        "404":
          description: Stage not found
              
    put:
      tags: [stages]
      summary: Update stage
      parameters:
        - name: stageID
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageRequest'
      responses:
        "200":
          description: Updated slam
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stage'
    delete:
      tags: [stages]
      summary: Delete a stage
      security:
        - bearerAuth: []
      parameters:
        - name: stageID
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "404":
          description: Stage not found

  /stages/{stageID}/performances:
    get:
      tags: [stages]
      summary: List performances for a stage
      parameters:
        - name: stageID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of performances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Performance'

    post:
      tags: [stages]
      summary: Add a performance to a stage
      security:
        - bearerAuth: []
      parameters:
        - name: stageID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceRequest'
      responses:
        "201":
          description: Performance created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
    put:
      tags: [stages]
      summary: Update opponents
      security:
        - bearerAuth: []
      parameters:
        - name: stageID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: array
                items:
                  type: string
                  format: uuid
      responses:
        "201":
          description: Vote recorded


  /performances/{performanceID}:
    get:
      tags: [performances]
      summary: Get a performance
      parameters:
        - name: performanceID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A performance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
        "404":
          description: Performance not found
    put:
      tags: [performances]
      summary: Update a performance
      security:
        - bearerAuth: []
      parameters:
        - name: performanceID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceRequest'
      responses:
        "201":
          description: Vote recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Performance'
    delete:
      tags: [performances]
      summary: Delete a performance
      security:
        - bearerAuth: []
      parameters:
        - name: performanceID
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted
        "404":
          description: Performance not found

  /performances/{performanceID}/votes:
    get:
      tags: [performances]
      summary: Get votes for performance
      parameters:
        - name: performanceID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of performances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
    post:
      tags: [performances]
      summary: Cast a vote for a performance
      parameters:
        - name: performanceID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteRequest'
      responses:
        "201":
          description: Vote recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vote'

  /participations/slams/{slamID}:
    post:
      tags: [participations]
      summary: Join a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Joined slam
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participation'
    delete:
      tags: [participations]
      summary: Leave a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Left slam

  /participations/users/{userID}/slams:
    get:
      tags: [participations]
      summary: Get slams for a user
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of slams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slam'

  /participations/slams/{slamID}/users:
    get:
      tags: [participations]
      summary: Get users for a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of participations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participation'
    
    post:
      tags: [participations]
      summary: Add user to a slam
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipationRequest'
      responses:
        "201":
          description: User added to a slam
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participation'
          
  /participations/slams/{slamID}/users/{userID}:
    put:
      tags: [participations]
      summary: Edit participant
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipationUpdateRequest'
      responses:
        "201":
          description: Joined slam
    
    delete:
      tags: [participations]
      summary: Remove participant
      security:
        - bearerAuth: []
      parameters:
        - name: slamID
          in: path
          required: true
          schema:
            type: string
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Left slam

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required: [id, email, name]
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        email:
          type: string
          x-order: 2
        name:
          type: string
        tmpUser:
          type: boolean
          x-oapi-codegen-extra-tags:
            gorm: "default:false"
  
    UserRequest:
      type: object
      properties:
        email:
          type: string
          x-order: 1
        name:
          type: string

    Slam:
      type: object
      required: [id, title, public]
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        title:
          type: string
          x-order: 2
        description:
          type: string
          x-order: 3
        location:
          type: string
          x-order: 4
        public:
          type: boolean
          x-order: 5
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          x-oapi-codegen-extra-tags:
            gorm: "many2many:participations"
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
          x-oapi-codegen-extra-tags:
            gorm: "foreignKey:SlamId"
    
    SlamRequest:
      type: object
      required: [title, public]
      properties:
        title:
          type: string
          x-order: 1
        description:
          type: string
          x-order: 2
        location:
          type: string
          x-order: 3
        public:
          type: boolean

    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        email:
          type: string
          x-order: 1
        name:
          type: string
          x-order: 2
        password:
          type: string
      example:
        email: bob@example.com
        name: Bob
        password: P@ssw0rd

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          x-order: 1
        password:
          type: string
          x-order: 2
      example:
        email: bob@example.com
        password: P@ssw0rd

    LoginResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
        token:
          type: string
          x-order: 2
    
    Stage:
      type: object
      required: [id, slamId, stageType]
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        slamId:
          type: string
          format: uuid
          x-order: 2
          x-go-type: string
        stageType:
          allOf:
          - $ref: '#/components/schemas/StageTypeEnum'
          x-order: 3
        round:
          type: integer
          x-order: 4
        details:
          type: string
          x-order: 5
        participations:
          type: array
          items:
            $ref: '#/components/schemas/Participation'
          x-oapi-codegen-extra-tags:
            gorm: "many2many:performances"

    StageRequest:
      type: object
      required: [stageType]
      properties:
        stageType:
          $ref: '#/components/schemas/StageTypeEnum'
          x-order: 1
        round:
          type: integer
          x-order: 2
        details:
          type: string

    Performance:
      type: object
      required: [id, participationId, stageId]
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        participationId:
          type: string
          format: uuid
          x-order: 2
          x-go-type: string
        stageId:
          type: string
          format: uuid
          x-order: 3
          x-go-type: string
        opponentPerformanceId:
          type: string
          format: uuid
          x-order: 4
          x-go-type: string
          nullable: true
        details:
          type: string
          x-order: 5
        participation:
          allOf:
          - $ref: '#/components/schemas/Participation'
          x-oapi-codegen-extra-tags:
            gorm: "foreignKey:ParticipationId;references:Id"
        stage:
          allOf:
          - $ref: '#/components/schemas/Stage'
          x-oapi-codegen-extra-tags:
            gorm: "foreignKey:StageId;references:Id"
        

    PerformanceRequest:
      type: object
      required: [participationId, details]
      properties:
        participationId:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
        opponentPerformanceId:
          type: string
          format: uuid
          x-go-type: string
          nullable: true
          x-order: 2
        details:
          type: string

    Participation:
      type: object
      required: [id, role, userId, slamId]
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        role:
          allOf:
          - $ref: '#/components/schemas/ParticipationRoleEnum'
          x-order: 2
        userId:
          type: string
          format: uuid
          x-order: 3
          x-go-type: string
        slamId:
          type: string
          format: uuid
          x-order: 4
          x-go-type: string
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          x-oapi-codegen-extra-tags:
            gorm: "foreignKey:UserId;references:Id"
        slam:
          allOf:
          - $ref: '#/components/schemas/Slam'
          x-oapi-codegen-extra-tags:
            gorm: "foreignKey:SlamId;references:Id"
        stages:
          type: array
          items:
            $ref: '#/components/schemas/Stage'
          x-oapi-codegen-extra-tags:
            gorm: "many2many:performances"
    
    ParticipationRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
        role:
          $ref: '#/components/schemas/ParticipationRoleEnum'
          
    ParticipationUpdateRequest:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/ParticipationRoleEnum'

    Vote:
      type: object
      required: [id, performanceId]
      properties:
        id:
          type: string
          format: uuid
          x-order: 1
          x-go-type: string
          x-oapi-codegen-extra-tags:
            gorm: "primaryKey"
        performanceId:
          type: string
          format: uuid
          x-order: 2
          x-go-type: string
        userIp:
          type: string
          x-order: 3
        deviceFingerprint:
          type: string

    VoteRequest:
      type: object
      required: [deviceFingerprint]
      properties:
        deviceFingerprint:
          type: string
    
    StageTypeEnum:
      type: string
      enum: 
        - simple
        - battle
        
    ParticipationRoleEnum:
      type: string
      enum: 
        - performer
        - creator
